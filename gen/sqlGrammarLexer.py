# Generated from D:/Programming/Universidade/Compiladores/RecursiveDescentParser\sqlGrammar.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,255,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,217,8,25,1,26,1,26,
        3,26,221,8,26,1,27,4,27,224,8,27,11,27,12,27,225,1,28,1,28,1,28,
        1,28,1,28,1,28,3,28,234,8,28,1,29,1,29,1,29,1,29,1,29,3,29,241,8,
        29,1,30,4,30,244,8,30,11,30,12,30,245,1,31,1,31,1,31,1,31,1,32,1,
        32,1,32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,1,0,23,2,0,67,67,99,99,2,0,82,82,114,114,2,0,69,69,101,101,
        2,0,65,65,97,97,2,0,84,84,116,116,2,0,68,68,100,100,2,0,66,66,98,
        98,2,0,83,83,115,115,2,0,73,73,105,105,2,0,78,78,110,110,2,0,79,
        79,111,111,2,0,85,85,117,117,2,0,76,76,108,108,2,0,70,70,102,102,
        2,0,77,77,109,109,2,0,89,89,121,121,2,0,87,87,119,119,2,0,72,72,
        104,104,2,0,80,80,112,112,2,0,71,71,103,103,2,0,65,90,97,122,1,0,
        48,57,3,0,9,10,13,13,32,32,264,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        1,67,1,0,0,0,3,74,1,0,0,0,5,83,1,0,0,0,7,88,1,0,0,0,9,92,1,0,0,0,
        11,98,1,0,0,0,13,105,1,0,0,0,15,112,1,0,0,0,17,117,1,0,0,0,19,123,
        1,0,0,0,21,126,1,0,0,0,23,132,1,0,0,0,25,139,1,0,0,0,27,143,1,0,
        0,0,29,150,1,0,0,0,31,159,1,0,0,0,33,161,1,0,0,0,35,163,1,0,0,0,
        37,166,1,0,0,0,39,169,1,0,0,0,41,171,1,0,0,0,43,173,1,0,0,0,45,175,
        1,0,0,0,47,177,1,0,0,0,49,179,1,0,0,0,51,216,1,0,0,0,53,220,1,0,
        0,0,55,223,1,0,0,0,57,233,1,0,0,0,59,240,1,0,0,0,61,243,1,0,0,0,
        63,247,1,0,0,0,65,251,1,0,0,0,67,68,7,0,0,0,68,69,7,1,0,0,69,70,
        7,2,0,0,70,71,7,3,0,0,71,72,7,4,0,0,72,73,7,2,0,0,73,2,1,0,0,0,74,
        75,7,5,0,0,75,76,7,3,0,0,76,77,7,4,0,0,77,78,7,3,0,0,78,79,7,6,0,
        0,79,80,7,3,0,0,80,81,7,7,0,0,81,82,7,2,0,0,82,4,1,0,0,0,83,84,7,
        8,0,0,84,85,7,9,0,0,85,86,7,4,0,0,86,87,7,10,0,0,87,6,1,0,0,0,88,
        89,7,11,0,0,89,90,7,7,0,0,90,91,7,2,0,0,91,8,1,0,0,0,92,93,7,4,0,
        0,93,94,7,3,0,0,94,95,7,6,0,0,95,96,7,12,0,0,96,97,7,2,0,0,97,10,
        1,0,0,0,98,99,7,8,0,0,99,100,7,9,0,0,100,101,7,7,0,0,101,102,7,2,
        0,0,102,103,7,1,0,0,103,104,7,4,0,0,104,12,1,0,0,0,105,106,7,7,0,
        0,106,107,7,2,0,0,107,108,7,12,0,0,108,109,7,2,0,0,109,110,7,0,0,
        0,110,111,7,4,0,0,111,14,1,0,0,0,112,113,7,13,0,0,113,114,7,1,0,
        0,114,115,7,10,0,0,115,116,7,14,0,0,116,16,1,0,0,0,117,118,7,10,
        0,0,118,119,7,1,0,0,119,120,7,5,0,0,120,121,7,2,0,0,121,122,7,1,
        0,0,122,18,1,0,0,0,123,124,7,6,0,0,124,125,7,15,0,0,125,20,1,0,0,
        0,126,127,7,16,0,0,127,128,7,17,0,0,128,129,7,2,0,0,129,130,7,1,
        0,0,130,131,7,2,0,0,131,22,1,0,0,0,132,133,7,11,0,0,133,134,7,18,
        0,0,134,135,7,5,0,0,135,136,7,3,0,0,136,137,7,4,0,0,137,138,7,2,
        0,0,138,24,1,0,0,0,139,140,7,7,0,0,140,141,7,2,0,0,141,142,7,4,0,
        0,142,26,1,0,0,0,143,144,7,5,0,0,144,145,7,2,0,0,145,146,7,12,0,
        0,146,147,7,2,0,0,147,148,7,4,0,0,148,149,7,2,0,0,149,28,1,0,0,0,
        150,151,7,4,0,0,151,152,7,1,0,0,152,153,7,11,0,0,153,154,7,9,0,0,
        154,155,7,0,0,0,155,156,7,3,0,0,156,157,7,4,0,0,157,158,7,2,0,0,
        158,30,1,0,0,0,159,160,5,40,0,0,160,32,1,0,0,0,161,162,5,41,0,0,
        162,34,1,0,0,0,163,164,5,60,0,0,164,165,5,61,0,0,165,36,1,0,0,0,
        166,167,5,62,0,0,167,168,5,61,0,0,168,38,1,0,0,0,169,170,5,61,0,
        0,170,40,1,0,0,0,171,172,5,62,0,0,172,42,1,0,0,0,173,174,5,60,0,
        0,174,44,1,0,0,0,175,176,5,44,0,0,176,46,1,0,0,0,177,178,5,42,0,
        0,178,48,1,0,0,0,179,180,5,59,0,0,180,50,1,0,0,0,181,182,7,8,0,0,
        182,183,7,9,0,0,183,217,7,4,0,0,184,185,7,7,0,0,185,186,7,4,0,0,
        186,187,7,1,0,0,187,188,7,8,0,0,188,189,7,9,0,0,189,217,7,19,0,0,
        190,191,7,5,0,0,191,192,7,10,0,0,192,193,7,11,0,0,193,194,7,6,0,
        0,194,195,7,12,0,0,195,217,7,2,0,0,196,197,7,6,0,0,197,198,7,10,
        0,0,198,199,7,10,0,0,199,200,7,12,0,0,200,201,7,2,0,0,201,202,7,
        3,0,0,202,217,7,9,0,0,203,204,7,5,0,0,204,205,7,3,0,0,205,206,7,
        4,0,0,206,217,7,2,0,0,207,208,7,5,0,0,208,209,7,3,0,0,209,210,7,
        4,0,0,210,211,7,2,0,0,211,212,5,95,0,0,212,213,7,4,0,0,213,214,7,
        8,0,0,214,215,7,14,0,0,215,217,7,2,0,0,216,181,1,0,0,0,216,184,1,
        0,0,0,216,190,1,0,0,0,216,196,1,0,0,0,216,203,1,0,0,0,216,207,1,
        0,0,0,217,52,1,0,0,0,218,221,3,59,29,0,219,221,3,57,28,0,220,218,
        1,0,0,0,220,219,1,0,0,0,221,54,1,0,0,0,222,224,7,20,0,0,223,222,
        1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,56,1,
        0,0,0,227,228,5,34,0,0,228,229,3,55,27,0,229,230,5,34,0,0,230,234,
        1,0,0,0,231,232,5,34,0,0,232,234,5,34,0,0,233,227,1,0,0,0,233,231,
        1,0,0,0,234,58,1,0,0,0,235,241,3,61,30,0,236,237,3,61,30,0,237,238,
        5,46,0,0,238,239,3,61,30,0,239,241,1,0,0,0,240,235,1,0,0,0,240,236,
        1,0,0,0,241,60,1,0,0,0,242,244,7,21,0,0,243,242,1,0,0,0,244,245,
        1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,62,1,0,0,0,247,248,3,
        61,30,0,248,249,5,46,0,0,249,250,3,61,30,0,250,64,1,0,0,0,251,252,
        7,22,0,0,252,253,1,0,0,0,253,254,6,32,0,0,254,66,1,0,0,0,7,0,216,
        220,225,233,240,245,1,6,0,0
    ]

class sqlGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    TYPE = 26
    VALUE = 27
    ID = 28
    STRING = 29
    NUM = 30
    INT = 31
    FLOAT = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'CREATE'", "'DATABASE'", "'INTO'", "'USE'", "'TABLE'", "'INSERT'", 
            "'SELECT'", "'FROM'", "'ORDER'", "'BY'", "'WHERE'", "'UPDATE'", 
            "'SET'", "'DELETE'", "'TRUNCATE'", "'('", "')'", "'<='", "'>='", 
            "'='", "'>'", "'<'", "','", "'*'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "VALUE", "ID", "STRING", "NUM", "INT", "FLOAT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "TYPE", "VALUE", 
                  "ID", "STRING", "NUM", "INT", "FLOAT", "WS" ]

    grammarFileName = "sqlGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


